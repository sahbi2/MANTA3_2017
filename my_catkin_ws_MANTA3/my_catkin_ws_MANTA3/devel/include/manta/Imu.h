// Generated by gencpp from file manta/Imu.msg
// DO NOT EDIT!


#ifndef MANTA_MESSAGE_IMU_H
#define MANTA_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace manta
{
template <class ContainerAllocator>
struct Imu_
{
  typedef Imu_<ContainerAllocator> Type;

  Imu_()
    : acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , magn_x(0.0)
    , magn_y(0.0)
    , magn_z(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , linear_acceleration_covariance()
    , angular_velocity_covariance()
    , orientation_covariance()
    , direction(0.0)  {
      linear_acceleration_covariance.assign(0.0);

      angular_velocity_covariance.assign(0.0);

      orientation_covariance.assign(0.0);
  }
  Imu_(const ContainerAllocator& _alloc)
    : acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , magn_x(0.0)
    , magn_y(0.0)
    , magn_z(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , linear_acceleration_covariance()
    , angular_velocity_covariance()
    , orientation_covariance()
    , direction(0.0)  {
      linear_acceleration_covariance.assign(0.0);

      angular_velocity_covariance.assign(0.0);

      orientation_covariance.assign(0.0);
  }



   typedef float _acc_x_type;
  _acc_x_type acc_x;

   typedef float _acc_y_type;
  _acc_y_type acc_y;

   typedef float _acc_z_type;
  _acc_z_type acc_z;

   typedef float _magn_x_type;
  _magn_x_type magn_x;

   typedef float _magn_y_type;
  _magn_y_type magn_y;

   typedef float _magn_z_type;
  _magn_z_type magn_z;

   typedef float _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef float _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef float _gyro_z_type;
  _gyro_z_type gyro_z;

   typedef boost::array<double, 9>  _linear_acceleration_covariance_type;
  _linear_acceleration_covariance_type linear_acceleration_covariance;

   typedef boost::array<double, 9>  _angular_velocity_covariance_type;
  _angular_velocity_covariance_type angular_velocity_covariance;

   typedef boost::array<double, 9>  _orientation_covariance_type;
  _orientation_covariance_type orientation_covariance;

   typedef double _direction_type;
  _direction_type direction;




  typedef boost::shared_ptr< ::manta::Imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manta::Imu_<ContainerAllocator> const> ConstPtr;

}; // struct Imu_

typedef ::manta::Imu_<std::allocator<void> > Imu;

typedef boost::shared_ptr< ::manta::Imu > ImuPtr;
typedef boost::shared_ptr< ::manta::Imu const> ImuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::manta::Imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::manta::Imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace manta

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'manta': ['/home/pi/my_catkin_ws/src/manta/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::manta::Imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manta::Imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manta::Imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manta::Imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manta::Imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manta::Imu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::manta::Imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7833a28c21b52638fe9f1652c911d12c";
  }

  static const char* value(const ::manta::Imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7833a28c21b52638ULL;
  static const uint64_t static_value2 = 0xfe9f1652c911d12cULL;
};

template<class ContainerAllocator>
struct DataType< ::manta::Imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "manta/Imu";
  }

  static const char* value(const ::manta::Imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::manta::Imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Header header\n\
float32 acc_x\n\
float32 acc_y\n\
float32 acc_z\n\
float32 magn_x\n\
float32 magn_y\n\
float32 magn_z\n\
float32 gyro_x\n\
float32 gyro_y\n\
float32 gyro_z\n\
float64[9] linear_acceleration_covariance\n\
float64[9] angular_velocity_covariance\n\
float64[9] orientation_covariance\n\
float64 direction\n\
\n\
";
  }

  static const char* value(const ::manta::Imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::manta::Imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
      stream.next(m.magn_x);
      stream.next(m.magn_y);
      stream.next(m.magn_z);
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
      stream.next(m.linear_acceleration_covariance);
      stream.next(m.angular_velocity_covariance);
      stream.next(m.orientation_covariance);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manta::Imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::manta::Imu_<ContainerAllocator>& v)
  {
    s << indent << "acc_x: ";
    Printer<float>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<float>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<float>::stream(s, indent + "  ", v.acc_z);
    s << indent << "magn_x: ";
    Printer<float>::stream(s, indent + "  ", v.magn_x);
    s << indent << "magn_y: ";
    Printer<float>::stream(s, indent + "  ", v.magn_y);
    s << indent << "magn_z: ";
    Printer<float>::stream(s, indent + "  ", v.magn_z);
    s << indent << "gyro_x: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_z);
    s << indent << "linear_acceleration_covariance[]" << std::endl;
    for (size_t i = 0; i < v.linear_acceleration_covariance.size(); ++i)
    {
      s << indent << "  linear_acceleration_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.linear_acceleration_covariance[i]);
    }
    s << indent << "angular_velocity_covariance[]" << std::endl;
    for (size_t i = 0; i < v.angular_velocity_covariance.size(); ++i)
    {
      s << indent << "  angular_velocity_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.angular_velocity_covariance[i]);
    }
    s << indent << "orientation_covariance[]" << std::endl;
    for (size_t i = 0; i < v.orientation_covariance.size(); ++i)
    {
      s << indent << "  orientation_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.orientation_covariance[i]);
    }
    s << indent << "direction: ";
    Printer<double>::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MANTA_MESSAGE_IMU_H
